// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package videoUpload

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoUploadRegServiceClient is the client API for VideoUploadRegService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoUploadRegServiceClient interface {
	CreateVideo(ctx context.Context, in *CreateVideoUploadRequest, opts ...grpc.CallOption) (*CreateVideoUploadResponse, error)
	GetVideo(ctx context.Context, in *GetVideoUploadRequest, opts ...grpc.CallOption) (*GetVideoUploadResponse, error)
	UpdateVideo(ctx context.Context, in *UpdateVideoUploadRequest, opts ...grpc.CallOption) (*UpdateVideoUploadResponse, error)
	DeleteVideo(ctx context.Context, in *DeleteVideoUploadRequest, opts ...grpc.CallOption) (*DeleteVideoUploadResponse, error)
	CompleteVideo(ctx context.Context, in *CompleteVideoUploadRequest, opts ...grpc.CallOption) (*CompleteVideoUploadResponse, error)
}

type videoUploadRegServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoUploadRegServiceClient(cc grpc.ClientConnInterface) VideoUploadRegServiceClient {
	return &videoUploadRegServiceClient{cc}
}

func (c *videoUploadRegServiceClient) CreateVideo(ctx context.Context, in *CreateVideoUploadRequest, opts ...grpc.CallOption) (*CreateVideoUploadResponse, error) {
	out := new(CreateVideoUploadResponse)
	err := c.cc.Invoke(ctx, "/videoUpload.VideoUploadRegService/CreateVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoUploadRegServiceClient) GetVideo(ctx context.Context, in *GetVideoUploadRequest, opts ...grpc.CallOption) (*GetVideoUploadResponse, error) {
	out := new(GetVideoUploadResponse)
	err := c.cc.Invoke(ctx, "/videoUpload.VideoUploadRegService/GetVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoUploadRegServiceClient) UpdateVideo(ctx context.Context, in *UpdateVideoUploadRequest, opts ...grpc.CallOption) (*UpdateVideoUploadResponse, error) {
	out := new(UpdateVideoUploadResponse)
	err := c.cc.Invoke(ctx, "/videoUpload.VideoUploadRegService/UpdateVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoUploadRegServiceClient) DeleteVideo(ctx context.Context, in *DeleteVideoUploadRequest, opts ...grpc.CallOption) (*DeleteVideoUploadResponse, error) {
	out := new(DeleteVideoUploadResponse)
	err := c.cc.Invoke(ctx, "/videoUpload.VideoUploadRegService/DeleteVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoUploadRegServiceClient) CompleteVideo(ctx context.Context, in *CompleteVideoUploadRequest, opts ...grpc.CallOption) (*CompleteVideoUploadResponse, error) {
	out := new(CompleteVideoUploadResponse)
	err := c.cc.Invoke(ctx, "/videoUpload.VideoUploadRegService/CompleteVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoUploadRegServiceServer is the server API for VideoUploadRegService service.
// All implementations must embed UnimplementedVideoUploadRegServiceServer
// for forward compatibility
type VideoUploadRegServiceServer interface {
	CreateVideo(context.Context, *CreateVideoUploadRequest) (*CreateVideoUploadResponse, error)
	GetVideo(context.Context, *GetVideoUploadRequest) (*GetVideoUploadResponse, error)
	UpdateVideo(context.Context, *UpdateVideoUploadRequest) (*UpdateVideoUploadResponse, error)
	DeleteVideo(context.Context, *DeleteVideoUploadRequest) (*DeleteVideoUploadResponse, error)
	CompleteVideo(context.Context, *CompleteVideoUploadRequest) (*CompleteVideoUploadResponse, error)
	mustEmbedUnimplementedVideoUploadRegServiceServer()
}

// UnimplementedVideoUploadRegServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoUploadRegServiceServer struct {
}

func (UnimplementedVideoUploadRegServiceServer) CreateVideo(context.Context, *CreateVideoUploadRequest) (*CreateVideoUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (UnimplementedVideoUploadRegServiceServer) GetVideo(context.Context, *GetVideoUploadRequest) (*GetVideoUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedVideoUploadRegServiceServer) UpdateVideo(context.Context, *UpdateVideoUploadRequest) (*UpdateVideoUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideo not implemented")
}
func (UnimplementedVideoUploadRegServiceServer) DeleteVideo(context.Context, *DeleteVideoUploadRequest) (*DeleteVideoUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedVideoUploadRegServiceServer) CompleteVideo(context.Context, *CompleteVideoUploadRequest) (*CompleteVideoUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteVideo not implemented")
}
func (UnimplementedVideoUploadRegServiceServer) mustEmbedUnimplementedVideoUploadRegServiceServer() {}

// UnsafeVideoUploadRegServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoUploadRegServiceServer will
// result in compilation errors.
type UnsafeVideoUploadRegServiceServer interface {
	mustEmbedUnimplementedVideoUploadRegServiceServer()
}

func RegisterVideoUploadRegServiceServer(s grpc.ServiceRegistrar, srv VideoUploadRegServiceServer) {
	s.RegisterService(&VideoUploadRegService_ServiceDesc, srv)
}

func _VideoUploadRegService_CreateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoUploadRegServiceServer).CreateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoUpload.VideoUploadRegService/CreateVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoUploadRegServiceServer).CreateVideo(ctx, req.(*CreateVideoUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoUploadRegService_GetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoUploadRegServiceServer).GetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoUpload.VideoUploadRegService/GetVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoUploadRegServiceServer).GetVideo(ctx, req.(*GetVideoUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoUploadRegService_UpdateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoUploadRegServiceServer).UpdateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoUpload.VideoUploadRegService/UpdateVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoUploadRegServiceServer).UpdateVideo(ctx, req.(*UpdateVideoUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoUploadRegService_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoUploadRegServiceServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoUpload.VideoUploadRegService/DeleteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoUploadRegServiceServer).DeleteVideo(ctx, req.(*DeleteVideoUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoUploadRegService_CompleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteVideoUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoUploadRegServiceServer).CompleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoUpload.VideoUploadRegService/CompleteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoUploadRegServiceServer).CompleteVideo(ctx, req.(*CompleteVideoUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoUploadRegService_ServiceDesc is the grpc.ServiceDesc for VideoUploadRegService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoUploadRegService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoUpload.VideoUploadRegService",
	HandlerType: (*VideoUploadRegServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVideo",
			Handler:    _VideoUploadRegService_CreateVideo_Handler,
		},
		{
			MethodName: "GetVideo",
			Handler:    _VideoUploadRegService_GetVideo_Handler,
		},
		{
			MethodName: "UpdateVideo",
			Handler:    _VideoUploadRegService_UpdateVideo_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _VideoUploadRegService_DeleteVideo_Handler,
		},
		{
			MethodName: "CompleteVideo",
			Handler:    _VideoUploadRegService_CompleteVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "videoStreaming/gunk/v1/videoUpload/all.proto",
}
